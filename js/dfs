function searchDFS() {
        const startPos = getStartPoint(environment);
        if (startPos) {
            const roads = [];
            console.time('Execution Time');
            console.time('road time');

            // Buscar el primer nodo meta
            let road1 = DFS(environment, startPos);
            if (road1) {
                roads.push(road1.camino);
            }

            // Buscar el segundo nodo meta
            let road2 = DFS(environment, startPos);
            if (road2) {
                roads.push(road2.camino);
            }

            console.timeEnd('road time');
            console.log(`Nodos expandidos: ${(road1 ? road1.currentNode : 0) + (road2 ? road2.currentNode : 0)}`);
            console.log(`Profundidad del árbol: ${Math.max(road1 ? road1.depth : 0, road2 ? road2.depth : 0)}`);
            console.timeEnd('Execution Time');
            console.log(roads);
        } else {
            alert("No se encontro el punto de partida");
        }
    }

function DFS(environment, startNode) {
        let path = [];
        const visited = new Set();
        const stack = [[startNode, 0]];
        const fathers = {};
        let maxDepth = 0;
        let goalsFound = 0;
        let goals = [];
        let result = {}; // Objeto devuelto por la función
        let countExpandedNodes = 0;
        while (stack.length > 0) {
            const [currentNode, depth] = stack.pop();
            if (depth > maxDepth) {
                maxDepth = depth;
            }
            if (!visited.has(`${currentNode[0]},${currentNode[1]}`)) {
                visited.add(`${currentNode[0]},${currentNode[1]}`);
                path.push(currentNode);
                if (environment[currentNode[0]][currentNode[1]] === 6) {
                    environment[currentNode[0]][currentNode[1]] = 0;
                    goalsFound++;
                    goals.push(currentNode);
                    if (goalsFound === 2) {
                        const road = [currentNode];
                        let father = getFather(currentNode, fathers);
                        while (father !== undefined) {
                            road.unshift(father);
                            father = getFather(father, fathers);
                        }
                        result = {
                            camino: road,
                            nodosExpandidos: countExpandedNodes,
                            currentNode: currentNode,
                            nodos: fathers,
                            depth: depth,
                            maxDepth: maxDepth,
                            goals: goals
                        };
                        break; // Salir del ciclo while si se encontraron ambos nodos meta
                    }
                }
                if (environment[currentNode[0]][currentNode[1]] !== 1) {
                    fathers[`${currentNode[0]},${currentNode[1]}`] = [];
                    if (currentNode[0] > 0 && environment[currentNode[0] - 1][currentNode[1]] !== 1) {
                        stack.push([[currentNode[0] - 1, currentNode[1]], depth + 1]);
                        fathers[`${currentNode[0]},${currentNode[1]}`].push(`${currentNode[0] - 1},${currentNode[1]}`);
                        countExpandedNodes++;
                    }
                    if (currentNode[0] < 9 && environment[currentNode[0] + 1][currentNode[1]] !== 1) {
                        stack.push([[currentNode[0] + 1, currentNode[1]], depth + 1]);
                        fathers[`${currentNode[0]},${currentNode[1]}`].push(`${currentNode[0] + 1},${currentNode[1]}`);
                        countExpandedNodes++;
                    }
                    if (currentNode[1] > 0 && environment[currentNode[0]][currentNode[1] - 1] !== 1) {
                        stack.push([[currentNode[0], currentNode[1] - 1], depth + 1]);
                        fathers[`${currentNode[0]},${currentNode[1]}`].push(`${currentNode[0]},${currentNode[1] - 1}`);
                        countExpandedNodes++;
                    }
                    if (currentNode[1] < 9 && environment[currentNode[0]][currentNode[1] + 1] !== 1) {
                        stack.push([[currentNode[0], currentNode[1] + 1], depth + 1]);
                        fathers[`${currentNode[0]},${currentNode[1]}`].push(`${currentNode[0]},${currentNode[1] + 1}`);
                        countExpandedNodes++;
                    }
                }
            }
        }
        return result; // Devolver el objeto con la solución
    }
